{"version":3,"sources":["components/Todo.js","components/FilterButton.js","components/Form.js","App.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","value","ref","useEffect","current","usePrevious","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","FilterButton","aria-pressed","isPressed","setFilter","Form","setName","addTask","autoComplete","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","listHeadingRef","updatedTasks","map","remainingTasks","editedTaskList","taskList","key","filterList","tasksNoun","length","headingText","prevTaskLength","newTask","nanoid","tabIndex","role","aria-labelledby","ReactDOM","render","document","getElementById"],"mappings":"wMASe,SAASA,EAAKC,GAAQ,IAAD,EACAC,oBAAS,GADT,mBACzBC,EADyB,KACdC,EADc,OAEFF,mBAAS,IAFP,mBAEzBG,EAFyB,KAEhBC,EAFgB,KAG1BC,EAAaC,iBAAO,MACpBC,EAAcD,iBAAO,MACrBE,EAZV,SAAqBC,GACjB,IAAMC,EAAMJ,mBAIZ,OAHAK,qBAAU,WACND,EAAIE,QAAUH,KAEXC,EAAIE,QAOQC,CAAYZ,GAY/B,IAAMa,EACF,0BAAMC,UAAU,cAAcC,SAPlC,SAAsBC,GAClBA,EAAEC,iBACFnB,EAAMoB,SAASpB,EAAMqB,GAAIjB,GACzBC,EAAW,IACXF,GAAW,KAIP,yBAAKa,UAAU,cACX,2BAAOA,UAAU,aAAaM,QAAStB,EAAMqB,IAA7C,gBACkBrB,EAAMuB,MAExB,2BAAOF,GAAIrB,EAAMqB,GAAIL,UAAU,YAAYQ,KAAK,OAAOd,MAAON,EAASqB,SAhBnF,SAAsBP,GAClBb,EAAWa,EAAEQ,OAAOhB,QAemFC,IAAKL,KAExG,yBAAKU,UAAU,aACX,4BAAQQ,KAAK,SAASR,UAAU,kBAAkBW,QAAS,kBAAMxB,GAAW,KAA5E,SAEI,0BAAMa,UAAU,mBAAhB,aAA6ChB,EAAMuB,OAEvD,4BAAQC,KAAK,SAASR,UAAU,8BAAhC,OAEI,0BAAMA,UAAU,mBAAhB,gBAAgDhB,EAAMuB,SAMhEK,EACF,yBAAKZ,UAAU,eACX,yBAAKA,UAAU,QACX,2BAAOK,GAAIrB,EAAMqB,GAAIG,KAAK,WAAWK,eAAgB7B,EAAM8B,UAAWL,SAAU,kBAAIzB,EAAM+B,oBAAoB/B,EAAMqB,OACpH,2BAAOL,UAAU,aAAaM,QAAStB,EAAMqB,IACxCrB,EAAMuB,OAGf,yBAAKP,UAAU,aACX,4BAAQQ,KAAK,SAASR,UAAU,MAAMW,QAAS,kBAAMxB,GAAW,IAAOQ,IAAKH,GAA5E,QACS,0BAAMQ,UAAU,mBAAmBhB,EAAMuB,OAElD,4BAAQC,KAAK,SAASR,UAAU,kBAAkBW,QAAS,kBAAI3B,EAAMgC,WAAWhC,EAAMqB,MAAtF,UACW,0BAAML,UAAU,mBAAmBhB,EAAMuB,SAahE,OAPAX,qBAAU,YACAH,GAAcP,GAChBI,EAAaO,QAAQoB,QACpBxB,IAAeP,GAChBM,EAAcK,QAAQoB,UAE3B,CAACxB,EAAYP,IACT,wBAAIc,UAAU,QAAQd,EAAYa,EAAkBa,EAApD,KC9DIM,MATf,SAAsBlC,GAClB,OACI,4BAAQwB,KAAK,SAASR,UAAU,iBAAiBmB,eAAcnC,EAAMoC,UAAWT,QAAS,kBAAM3B,EAAMqC,UAAUrC,EAAMuB,QACnH,0BAAMP,UAAU,mBAAhB,QACA,8BAAOhB,EAAMuB,MACb,0BAAMP,UAAU,mBAAhB,YC0BKsB,MA/Bf,SAActC,GAAQ,IAAD,EAEOC,mBAAS,IAFhB,mBAEVsB,EAFU,KAEJgB,EAFI,KAgBjB,OACI,0BAAMtB,SARV,SAAsBC,GAClBA,EAAEC,iBAEFnB,EAAMwC,QAAQjB,GACdgB,EAAQ,MAKR,wBAAIvB,UAAU,iBACZ,2BAAOM,QAAQ,iBAAiBN,UAAU,aAA1C,2BAIF,2BAAOQ,KAAK,OAAOH,GAAG,iBAAiBL,UAAU,kBAAkBO,KAAK,OAAOkB,aAAa,MAAM/B,MAAOa,EAAME,SAnBnH,SAAsBP,GAClBqB,EAAQrB,EAAEQ,OAAOhB,UAmBf,4BAAQc,KAAK,SAASR,UAAU,4BAAhC,S,OClBJ0B,EAAa,CACjBC,IAAK,kBAAM,GAAMC,OAAQ,SAAAC,GAAI,OAAKA,EAAKf,WACvCgB,UAAW,SAAAD,GAAI,OAAIA,EAAKf,YAEpBiB,EAAeC,OAAOC,KAAKP,GA+FlBQ,MArFf,SAAalD,GAAQ,IAAD,EAEQC,mBAASD,EAAMmD,OAFvB,mBAEXA,EAFW,KAEJC,EAFI,OAGUnD,mBAAS,OAHnB,mBAGXoD,EAHW,KAGHhB,EAHG,KAIZiB,EAAiB/C,iBAAO,MAQ9B,SAASwB,EAAoBV,GAC3B,IAAMkC,EAAeJ,EAAMK,KAAI,SAAAX,GAE7B,OAAIxB,IAAOwB,EAAKxB,GAEP,2BAAIwB,GAAX,IAAiBf,WAAYe,EAAKf,YAE7Be,KAETO,EAASG,GAGX,SAASvB,EAAWX,GAClB,IAAMoC,EAAiBN,EAAME,QAAO,SAAAR,GAAI,OAAExB,IAAMwB,EAAKxB,MACrD+B,EAASK,GAGX,SAASrC,EAASC,EAAIjB,GACpB,IAAMsD,EAAiBP,EAAMK,KAC3B,SAAAX,GACE,OAAGxB,IAAOwB,EAAKxB,GACN,2BAAIwB,GAAX,IAAiBtB,KAAMnB,IAElByC,KAIXO,EAASM,GAGX,IAAMC,EAAWR,EAAME,OAAOX,EAAWW,IAASG,KAChD,SAAAX,GAAI,OAAK,kBAAC9C,EAAD,CAAMsB,GAAIwB,EAAKxB,GAAIE,KAAMsB,EAAKtB,KACvCO,UAAWe,EAAKf,UAAW8B,IAAKf,EAAKxB,GACrCU,oBAAqBA,EAAqBC,WAAYA,EACtDZ,SAAUA,OAGNyC,EAAad,EAAaS,KAAI,SAAAjC,GAAI,OACtC,kBAAC,EAAD,CAAcqC,IAAKrC,EAAMA,KAAMA,EAAMa,UAAWb,IAAO8B,EAAQhB,UAAWA,OAEtEyB,EAAgC,IAApBH,EAASI,OAAe,QAAU,OAC9CC,EAAW,UAAML,EAASI,OAAf,YAAyBD,EAAzB,cAEXG,EA/DR,SAAqBvD,GACnB,IAAMC,EAAMJ,mBAIZ,OAHAK,qBAAU,WACRD,EAAIE,QAAUH,KAETC,EAAIE,QA0DYC,CAAYqC,EAAMY,QAOzC,OALAnD,qBAAU,WACJuC,EAAMY,OAASE,KAAoB,GACrCX,EAAezC,QAAQoB,UAExB,CAACkB,EAAMY,OAAQE,IAEhB,yBAAKjD,UAAU,uBACb,2CACA,kBAAC,EAAD,CAAMwB,QA1DV,SAAiBjB,GACf,IAAM2C,EAAU,CAAC7C,GAAG,QAAQ8C,cAAU5C,KAAKA,EAAMO,WAAW,GAC5DsB,EAAS,GAAD,mBAAKD,GAAL,CAAYe,QAyDlB,yBAAKlD,UAAU,qCAIb6C,GAEF,wBAAIxC,GAAG,eAAe+C,SAAS,KAAKzD,IAAK2C,GAAiBU,GAC1D,wBAAIK,KAAK,OAAOrD,UAAU,wCAAwCsD,kBAAgB,gBAIhFX,KCpFJY,IAASC,OAAO,kBAAC,EAAD,CAAKrB,MATZ,CACX,CAAC9B,GAAI,SAAUE,KAAM,MAAOO,WAAW,GACvC,CAACT,GAAI,SAAUE,KAAM,QAASO,WAAW,GACzC,CAACT,GAAI,SAAUE,KAAM,SAAUO,WAAW,GAC1C,CAACT,GAAI,SAAUE,KAAM,OAAQO,WAAW,MAKD2C,SAASC,eAAe,U","file":"static/js/main.03f6d699.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\nexport default function Todo(props) {\r\n    const [isEditing, setEditing] = useState(false);\r\n    const [newName, setNewName] = useState(\"\");\r\n    const editFieldRef=useRef(null);\r\n    const editButtonRef=useRef(null);\r\n    const wasEditing = usePrevious(isEditing);\r\n\r\n    function handleChange(e) {\r\n        setNewName(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.editTask(props.id, newName);\r\n        setNewName('');\r\n        setEditing(false);\r\n    }\r\n    const editingTemplate = (\r\n        <form className='stack-small' onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label className='todo-label' htmlFor={props.id}>\r\n                    New name for {props.name}\r\n                </label>\r\n                <input id={props.id} className='todo-text' type='text' value={newName} onChange={handleChange} ref={editFieldRef} />\r\n            </div>\r\n            <div className='btn-group'>\r\n                <button type='button' className='btn todo-cancel' onClick={() => setEditing(false)}>\r\n                    Cancel\r\n                    <span className='visually-hidden'> renaming {props.name}</span>\r\n                </button>\r\n                <button type='submit' className='btn btn__primary todo-edit'>\r\n                    Save\r\n                    <span className='visually-hidden'>new name for {props.name}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n    \r\n    const viewTemplate = (\r\n        <div className='stack-small'>\r\n            <div className='c-cb'>\r\n                <input id={props.id} type='checkbox' defaultChecked={props.completed} onChange={()=>props.toggleTaskCompleted(props.id)} />\r\n                <label className='todo-label' htmlFor={props.id}>\r\n                    {props.name}\r\n                </label>\r\n            </div>\r\n            <div className='btn-group'>\r\n                <button type='button' className='btn' onClick={() => setEditing(true)} ref={editButtonRef}>\r\n                    Edit <span className='visually-hidden'>{props.name}</span>\r\n                </button>\r\n                <button type='button' className='btn btn__danger' onClick={()=>props.deleteTask(props.id)}>\r\n                    Delete <span className='visually-hidden'>{props.name}</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n        \r\n    useEffect(() => {\r\n        if ( !wasEditing && isEditing) {\r\n            editFieldRef.current.focus();\r\n        } if(wasEditing && !isEditing) {\r\n            editButtonRef.current.focus();\r\n        }\r\n    }, [wasEditing, isEditing]);\r\n    return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate} </li>\r\n\r\n    // return (\r\n    //     <li className='todo stack-small'>\r\n    //       <div className='c-cb'>\r\n    //         <input id={props.id} type='checkbox' defaultChecked={props.completed} onChange={()=>props.toggleTaskCompleted(props.id)}/>\r\n    //         <label className='todo-label' htmlFor='todo-0'>\r\n    //           {props.name}\r\n    //         </label>\r\n    //       </div>\r\n    //       <div className='btn-group'>\r\n    //         <button type='button' className='btn' >\r\n    //             Edit <span className='visually-hidden'>{props.name}</span>\r\n    //         </button>\r\n    //         <button type='button' className='btn btn__danger' onClick={()=>props.deleteTask(props.id)}>\r\n    //             Delete <span className='visually-hidden'>{props.name}</span>\r\n    //         </button>\r\n    //       </div>\r\n    //     </li>\r\n    // );\r\n}","import React from \"react\"\r\n\r\nfunction FilterButton(props) {\r\n    return(\r\n        <button type='button' className='btn toggle-btn' aria-pressed={props.isPressed} onClick={() => props.setFilter(props.name)}>\r\n          <span className='visually-hidden'>Show</span>\r\n          <span>{props.name}</span>\r\n          <span className='visually-hidden'> tasks</span>\r\n        </button>\r\n    );\r\n}\r\nexport default FilterButton;","import React, {useState} from 'react';\r\n\r\nfunction Form(props) {\r\n\r\n    const [name, setName] = useState('');\r\n\r\n    function handleChange(e){\r\n        setName(e.target.value);\r\n        // console.log(e.target.value)\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        // alert('Heelo Demehin');\r\n        props.addTask(name);\r\n        setName(\"\");\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <h2 className='label-wrapper'>\r\n          <label htmlFor='new-todo-input' className='label__lg'>\r\n            What needs to be done?\r\n          </label>\r\n        </h2>\r\n        <input type='text' id='new-todo-input' className='input input__lg' name='text' autoComplete='off' value={name} onChange={handleChange}/>\r\n          <button type='submit' className='btn btn__primary btn__lg'>\r\n            Add\r\n          </button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React, {useState, useRef, useEffect} from 'react';\nimport Todo from \"./components/Todo\";\nimport FilterButton from \"./components/FilterButton\";\nimport Form from \"./components/Form\";\nimport {nanoid} from \"nanoid\";\n// import logo from './logo.svg';\n// import './App.css';\n\nconst FILTER_MAP = {\n  All: () => true, Active: task => !task.completed, \n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  const listHeadingRef = useRef(null);\n  \n\n  function addTask(name) {\n    const newTask = {id:\"todo-\"+nanoid(), name:name, completed: false};\n    setTasks([...tasks, newTask])\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id){\n        // Use object spread to make a new object whose completed prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task=>id !==task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(\n      task => {\n        if(id === task.id){\n          return {...task, name: newName}\n        }\n        return task;\n      }\n\n    );\n    setTasks(editedTaskList);\n  }\n  // const subject = props.subject;\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(\n    task => (<Todo id={task.id} name={task.name} \n    completed={task.completed} key={task.id} \n    toggleTaskCompleted={toggleTaskCompleted} deleteTask={deleteTask}\n    editTask={editTask} />\n  ));\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton key={name} name={name} isPressed={name===filter} setFilter={setFilter} />\n  ));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n  return (\n    <div className='todoapp stack-large'>\n      <h1>To-do Matic</h1>\n      <Form addTask={addTask}/>\n      <div className='filters btn-group stack-exception'>\n        {/* <FilterButton/>\n        <FilterButton/>\n        <FilterButton/> */\n        filterList}\n      </div>\n      <h2 id='list-heading' tabIndex='-1' ref={listHeadingRef}>{headingText}</h2>\n      <ul role='list' className='todo-list stack-large stack-exception' aria-labelledby='list-heading'>\n        {/* <Todo name='Eat' completed={true} id='todo-0'/>\n        <Todo name='Sleep' completed={false} id='todo-1'/>\n        <Todo name='Repeat' completed={false} id='todo-2'/> */\n        taskList\n        }\n        \n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nconst DATA = [\n  {id: \"todo-0\", name: \"Eat\", completed: true},\n  {id: \"todo-1\", name: \"Sleep\", completed: false},\n  {id: \"todo-2\", name: \"Repeat\", completed: false},\n  {id: \"todo-3\", name: \"Read\", completed: false}\n];\n\n// ReactDOM.render(\n//   <React.StrictMode>\n    ReactDOM.render(<App tasks={DATA}/>, document.getElementById('root'));\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}